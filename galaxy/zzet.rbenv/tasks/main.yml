---
- name: include env vars
  include_vars: "{{ rbenv.env }}.yml"

- include: apt_build_depends.yml
  when: ansible_pkg_mgr == 'apt'
- include: yum_build_depends.yml
  when: ansible_pkg_mgr == 'yum'
# - include: pacman_build_depends.yml # Arch Linux
#   when: ansible_pkg_mgr == 'pacman'
- include: homebrew_build_depends.yml
  when: ansible_os_family == 'Darwin'

- name: set rbenv_owner
  set_fact: 'rbenv_owner={{ rbenv_owner | default("root", true) }}'

- name: checkout rbenv_repo for system
  become: yes
  become_user: '{{ rbenv_owner }}'
  git: >
    repo={{ rbenv_repo }}
    dest={{ rbenv_root }}
    version={{ rbenv.version }}
    accept_hostkey=yes
    force=yes
  when: rbenv.env == "system"
  tags:
    - rbenv

- name: create plugins directory for system
  become: yes
  become_user: '{{ rbenv_owner }}'
  file: state=directory path={{ rbenv_root }}/plugins
  when: rbenv.env == "system"
  tags:
    - rbenv

- name: install plugins for system
  become: yes
  become_user: '{{ rbenv_owner }}'
  git: >
    repo={{ item.repo }}
    dest={{ rbenv_root }}/plugins/{{ item.name }}
    version={{ item.version }}
    accept_hostkey=yes
    force=yes
  with_items: "{{ rbenv_plugins }}"
  when: rbenv.env == "system"
  tags:
    - rbenv

- name: Set group ownership of content under rbenv_root
  shell:
    find '{{ rbenv_root }}'
      \( -iname ".git" -prune \) -o
      ! -group '{{ item }}'
      -exec chgrp -v '{{ item }}' {} + | head -n 1
  become: yes
  with_items: '{{ rbenv_group }}'
  when:
    - rbenv.env == "system"
    - rbenv_group is defined
    - rbenv_group != None
  register: rbenv_chgrp
  changed_when: '"changed group" in rbenv_chgrp.stdout'
  tags:
    - rbenv

- name: Set group permissions of content under rbenv_root
  shell:
    find '{{ rbenv_root }}'
      \( -iname ".git" -prune \) -o
      -type d ! -perm -g+s
      -exec chmod -v g+rwxs {} + | head -n 1
  become: yes
  when:
    - rbenv.env == "system"
    - rbenv_group is defined
    - rbenv_group != None
  register: rbenv_chmod
  changed_when: '"changed from" in rbenv_chmod.stdout'
  tags:
    - rbenv

- name: checkout rbenv_repo for selected users
  git: >
    repo={{ rbenv_repo }}
    dest={{ rbenv_root }}
    version={{ rbenv.version }}
    accept_hostkey=yes
    force=yes
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  when: rbenv.env != "system"
  ignore_errors: yes
  tags:
    - rbenv

- name: create plugins directory for selected users
  file: state=directory path={{ rbenv_root }}/plugins
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  when: rbenv.env != "system"
  ignore_errors: yes
  tags:
    - rbenv

- name: install plugins for selected users
  git: >
    repo={{ item[1].repo }}
    dest={{ rbenv_root }}/plugins/{{ item[1].name }}
    version={{ item[1].version }}
    accept_hostkey=yes
    force=yes
  with_nested:
    - "{{ rbenv_users }}"
    - "{{ rbenv_plugins }}"
  become: yes
  become_user: "{{ item[0] }}"
  when: rbenv.env != "system"
  ignore_errors: yes
  tags:
    - rbenv

- name: add rbenv initialization to profile system-wide
  template: src=rbenv.sh.j2 dest=/etc/profile.d/rbenv.sh owner=root group=root mode=0755
  become: yes
  when:
    - ansible_os_family != 'OpenBSD' and ansible_os_family != 'Darwin'
  tags:
    - rbenv

- name: set default-gems for select users
  copy: src=default-gems dest={{ rbenv_root }}/default-gems
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  when:
    - not "system" == "{{ rbenv.env }}"
    - default_gems_file is not defined
  ignore_errors: yes
  tags:
    - rbenv

- name: set custom default-gems for select users
  copy: src={{ default_gems_file }} dest={{ rbenv_root }}/default-gems
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  when:
    - not "system" == "{{ rbenv.env }}"
    - default_gems_file is defined
  ignore_errors: yes
  tags:
    - rbenv

- name: set gemrc for select users
  copy: src=gemrc dest=~/.gemrc
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  when: rbenv.env != "system"
  ignore_errors: yes
  tags:
    - rbenv

- name: set vars for select users
  copy: src=vars dest={{ rbenv_root }}/vars
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  when: rbenv.env != "system"
  ignore_errors: yes
  tags:
    - rbenv

- name: check ruby {{ rbenv.ruby_version }} installed for system
  shell: $SHELL -lc "rbenv versions | grep {{ rbenv.ruby_version }}"
  register: ruby_installed
  changed_when: false
  ignore_errors: yes
  failed_when: false
  always_run: yes
  when: rbenv.env == "system"
  tags:
    - rbenv

- name: install ruby {{ rbenv.ruby_version }} for system
  shell: bash -lc "rbenv install {{ rbenv.ruby_version }}"
  become: yes
  when:
    - rbenv.env == "system"
    - ruby_installed.rc != 0
  tags:
    - rbenv

- name: check if current system ruby version is {{ rbenv.ruby_version }}
  shell: $SHELL -lc "rbenv version | cut -d ' ' -f 1 | grep -Fx '{{ rbenv.ruby_version }}'"
  register: ruby_selected
  changed_when: false
  ignore_errors: yes
  failed_when: false
  always_run: yes
  when: rbenv.env == "system"
  tags:
    - rbenv

- name: set ruby {{ rbenv.ruby_version }} for system
  become: yes
  shell: bash -lc "rbenv global {{ rbenv.ruby_version }} && rbenv rehash"
  when:
    - rbenv.env == "system"
    - ruby_selected.rc != 0
  tags:
    - rbenv

- name: check ruby {{ rbenv.ruby_version }} installed for select users
  shell: $SHELL -lc "rbenv versions | grep {{ rbenv.ruby_version }}"
  become: yes
  become_user: "{{ item }}"
  with_items: "{{ rbenv_users }}"
  when: rbenv.env != "system"
  register: ruby_installed
  changed_when: false
  ignore_errors: yes
  failed_when: false
  always_run: yes
  tags:
    - rbenv

- name: install ruby {{ rbenv.ruby_version }} for select users
  shell: $SHELL -lc "rbenv install {{ rbenv.ruby_version }}"
  become: yes
  become_user: "{{ item[1] }}"
  with_together:
    - "{{ ruby_installed.results }}"
    - "{{ rbenv_users }}"
  when:
    - rbenv.env != "system"
    - item[0].rc != 0
  ignore_errors: yes
  tags:
    - rbenv

- name: check if user ruby version is {{ rbenv.ruby_version }}
  shell: $SHELL -lc "rbenv version | cut -d ' ' -f 1 | grep -Fx '{{ rbenv.ruby_version }}'"
  become: yes
  become_user: "{{ item }}"
  with_items: "{{ rbenv_users }}"
  when: rbenv.env != "system"
  register: ruby_selected
  changed_when: false
  ignore_errors: yes
  failed_when: false
  always_run: yes
  tags:
    - rbenv

- name: set ruby {{ rbenv.ruby_version }} for select users
  shell: $SHELL -lc "rbenv global {{ rbenv.ruby_version }} && rbenv rehash"
  become: yes
  become_user: "{{ item[1] }}"
  with_together:
    - "{{ ruby_selected.results }}"
    - "{{ rbenv_users }}"
  when:
    - rbenv.env != "system"
    - item[0].rc != 0
  ignore_errors: yes
  tags:
    - rbenv
